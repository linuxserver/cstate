<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><link rel="alternate" type="text/html" href="https://info.linuxserver.io"/><title>portainer on Info :: LinuxServer.io</title><link>https://info.linuxserver.io/affected/portainer/</link><description>History</description><generator>github.com/cstate</generator><language>en</language><lastBuildDate>2023-05-22T12:00:00+00:00</lastBuildDate><updated>2023-05-22T12:00:00+00:00</updated><atom:link href="https://info.linuxserver.io/affected/portainer/index.xml" rel="self" type="application/rss+xml"/><item><title>[Resolved] Known Issue: Portainer &amp; Synology Docker UI</title><link>https://info.linuxserver.io/issues/2023-05-22-portainer/</link><pubDate>Mon, 22 May 2023 12:00:00 +0000</pubDate><guid>https://info.linuxserver.io/issues/2023-05-22-portainer/</guid><category>2023-11-22 18:00:00Z</category><description>Update The underlying issue still exists for both Portainer and the Synology container management UI, but the primary driver of issues has largely dissipated and so we are unpinning this notice.
Original Post There is a known issue with Portainer and the Synology Docker UI when updating (or otherwise recreating) containers, which causes them to overwrite settings in the new image with values from the old container. Creating a new container from scratch does not exhibit this behaviour.</description><content type="html">&lt;h3 id="update">Update&lt;/h3>
&lt;p>The underlying issue still exists for both Portainer and the Synology container management UI, but the primary driver of issues has largely dissipated and so we are unpinning this notice.&lt;/p>
&lt;h3 id="original-post">Original Post&lt;/h3>
&lt;p>There is a known issue with Portainer and the Synology Docker UI when updating (or otherwise recreating) containers, which causes them to overwrite settings in the new image with values from the old container. Creating a new container from scratch does not exhibit this behaviour.&lt;/p>
&lt;p>This non-standard behaviour causes containers to fail to start correctly in some cases, and may result in unexpected or unwanted configuration in others. For example, in our &lt;a href="https://github.com/linuxserver/docker-sabnzbd/issues/188">SABnzbd image&lt;/a> the &lt;code>PATH&lt;/code> environment variable is overwritten, leaving the application unable to locate the necessary Python modules to enable it to start. This is likely to become more common in the future, and there is not a practical or scalable solution that we can apply from our end to avoid this issue.&lt;/p>
&lt;p>&lt;strong>Our position remains that we provide support only for containers created and updated using Docker Compose, the Docker CLI, or using our Unraid templates, and not any 3rd party tools.&lt;/strong>&lt;/p></content></item></channel></rss>